{"version":3,"file":"static/js/418.6c54e3b9.chunk.js","mappings":"4OAEaA,EAAiBC,EAAAA,GAAW,CACvCC,KAAMD,EAAAA,KAEHE,IAAI,EAAG,wCACPC,IAAI,GAAI,2CACRC,SAAS,uDACZC,MAAOL,EAAAA,KAEJK,MAAM,oDACND,SAAS,wBACZE,SAAUN,EAAAA,KAEPE,IAAI,EAAG,+CACPE,SAAS,2BAGDG,EAAcP,EAAAA,GAAW,CACpCK,MAAOL,EAAAA,KAEJK,MAAM,mDACND,SAAS,wBACZE,SAAUN,EAAAA,KAEPE,IAAI,EAAG,+CACPE,SAAS,2BAGDI,EAAa,wC,qQC4J1B,UA5Jc,WACZ,IACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCF,EAAAA,EAAAA,WAAS,GAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEQC,GAAkBC,EAAAA,EAAAA,KAAlBD,cAEFE,GAAMC,EAAAA,EAAAA,QAAO,OAEnBC,EAAAA,EAAAA,YAAU,WACc,MAAlBJ,IACFK,EAAAA,GAAAA,MACE,8DACAC,EAAAA,GAEFb,GAASc,EAAAA,EAAAA,IAAU,OACnBR,GAAgB,GAEnB,GAAE,CAACN,EAAUO,IAQd,OACE,UAAC,KAAD,CACEQ,GAAI,EACJC,EAAE,OACFC,KAAK,qBACLC,GAAG,UACHC,UAAU,SALZ,WAOE,SAAC,KAAD,sBACA,SAAC,KAAD,CAAKC,QAAQ,OAAOC,eAAe,SAAnC,UACE,SAAC,KAAD,CACEC,cArCc,CAAE1B,MAAO,GAAIC,SAAU,GAAI0B,WAAY,QAsCrDC,SAlBa,SAAC,GAAmD,IAAjD5B,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAsB4B,EAAmB,EAA/BF,WACvCjB,GAAgB,GAChBN,GAAS0B,EAAAA,EAAAA,IAAaD,IACtBzB,GAAS2B,EAAAA,EAAAA,IAAM,CAAE/B,MAAAA,EAAOC,SAAAA,IACzB,EAeO+B,iBAAkB9B,EAAAA,GAClB+B,SAAUpB,EAJZ,SAMG,kBAAGqB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAAzB,OACC,iBAAMR,SAAUM,EAAhB,UACE,UAAC,IAAD,CAAQG,QAAS,EAAGb,QAAQ,OAAOc,MAAM,aAAzC,WACE,SAAC,IAAD,WACE,UAAC,KAAD,CAAaC,YAAaJ,EAAOnC,OAASoC,EAAQpC,MAAlD,WACE,SAAC,IAAD,CAAWwC,QAAQ,QAAnB,qBACA,SAAC,KAAD,CACEC,aAAa,MACbC,GAAIC,EAAAA,EACJC,GAAG,QACHhD,KAAK,QACLiD,KAAK,QACLC,QAAQ,SACRC,aAAa,OACb3B,EAAE,QACF4B,GAAI,EACJC,SAAU,SAAAC,GACR,IAAIC,EAMJ,OAJID,EAAQ,IACVC,EAAQhB,EAAOnC,OAGVmD,CACR,KAEH,UAAC,KAAD,YACG,SAAC,MAAD,IACAhB,EAAOnC,eAId,SAAC,IAAD,WACE,UAAC,KAAD,CACEuC,YAAaJ,EAAOlC,UAAYmC,EAAQnC,SAD1C,WAGE,SAAC,IAAD,CAAWuC,QAAQ,WAAnB,uBACA,UAAC,IAAD,CAAYY,KAAK,KAAjB,WACE,SAAC,KAAD,CACEX,aAAa,MACbC,GAAIC,EAAAA,EACJC,GAAG,WACHhD,KAAK,WACLkD,QAAQ,SACRD,KAAMtC,EAAe,OAAS,WAC9BwC,aAAa,OACbC,GAAI,EACJK,GAAG,OACHjC,EAAE,QACF6B,SAAU,SAAAC,GACR,IAAIC,EAIJ,OAHID,EAAMI,OAAS,IACjBH,EAAQhB,EAAOlC,UAEVkD,CACR,KAEH,SAAC,IAAD,CAAmB/B,EAAG,GAAtB,UACG,UAAAP,EAAI0C,eAAJ,eAAaC,OAAOvD,SAASqD,QAAS,IACrC,SAAC,IAAD,CACEF,KAAK,KACLhC,EAAG,EACHqC,EAAG,EACHV,aAAc,GACdW,QAAS,kBAAMlD,GAAiBD,EAAvB,EALX,SAOGA,GAAe,SAAC,MAAD,KAAiB,SAAC,MAAD,YAKzC,UAAC,KAAD,YACG,SAAC,MAAD,IACA4B,EAAOlC,kBAId,UAAC,KAAD,CAAKyC,GAAG,QAAQlB,QAAQ,OAAxB,WACE,SAAC,KAAD,CACEkB,GAAIiB,EAAAA,EACJf,GAAG,aACHhD,KAAK,aACLgE,YAAY,OACZC,gBAAgB,KAElB,SAAC,KAAD,+BAGF,SAAC,IAAD,CACEC,WAAYrD,EACZsD,UAAWtD,EACXuD,YAAY,aACZjB,aAAa,OACbF,KAAK,SACLe,YAAY,OACZK,MAAM,QAPR,wBAxFL,OAwGL,UAAC,KAAD,CAAKvB,GAAG,IAAIwB,GAAI,EAAhB,gBAEE,SAAC,KAAD,CAAmBC,GAAG,gBAAtB,yBAEF,SAAC,KAAD,MAGL,C,kLClLYC,EAAoBC,EAAAA,EAAAA,EAAH,kEACf,SAAAZ,GAAC,OAAIA,EAAEa,MAAMC,UAAUC,CAAtB,IACG,SAAAf,GAAC,OAAIA,EAAEa,MAAMG,MAAM,EAAlB,IAGPC,GAAeL,EAAAA,EAAAA,GAAOM,EAAAA,GAAPN,CAAH,gdAIV,SAAAZ,GAAC,OAAIA,EAAEa,MAAMC,UAAUK,CAAtB,IAEJ,SAAAnB,GAAC,OAAIA,EAAEa,MAAMO,QAAQC,KAApB,IACK,SAAArB,GAAC,OAAIA,EAAEa,MAAMS,OAAOC,OAAnB,IACN,SAAAvB,GAAC,OAAIA,EAAEa,MAAMG,MAAM,EAAlB,IACQ,SAAAhB,GAAC,OAAIA,EAAEa,MAAMS,OAAO5B,KAAnB,IACJ,SAAAM,GAAC,OAAIA,EAAEa,MAAMW,MAAMC,MAAlB,IACJ,SAAAzB,GAAC,OAAIA,EAAEa,MAAMG,MAAM,EAAlB,IAaJ,SAAAhB,GAAC,OAAIA,EAAEa,MAAMS,OAAOI,WAAnB,IAIDC,GAAoBf,EAAAA,EAAAA,GAAOgB,EAAAA,GAAPhB,CAAH,gEACb,SAAAZ,GAAC,OAAIA,EAAEa,MAAMG,MAAM,EAAlB,IAGLa,EAAiBjB,EAAAA,EAAAA,KAAH,6CACV,SAAAZ,GAAC,OAAIA,EAAEa,MAAMG,MAAM,EAAlB,G,oEC1CLxD,EAAmB,CAC9BsE,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVxB,MAAO,UACPyB,WAAYC,EAAAA,IAYAA,EAAAA,E","sources":["constants/schema.js","pages/LogIn.jsx","pages/PageStyles/UserAuthForm.styled.jsx","settings/toastOptions.js"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup\n    .string()\n    .min(4, 'Name must be at least 4 letters long')\n    .max(16, 'Name must be not longer than 16 letters')\n    .required('Please enter name. For example Mango, Polly, Repeta'),\n  email: yup\n    .string()\n    .email('Must be a valid email. Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const logInSchema = yup.object({\n  email: yup\n    .string()\n    .email('Must be a valid email Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const mailFormat = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\n","import { useState, useEffect, useRef } from 'react';\nimport { Formik, Field } from 'formik';\nimport { logInSchema } from 'constants/schema';\nimport { FiAlertTriangle } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from './../redux/auth/operations';\nimport { authError, rememberUser } from 'redux/auth/authSlice';\nimport { useAuth } from 'components/hooks';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  InputGroup,\n  Input,\n  VStack,\n  InputRightElement,\n  Button,\n  Checkbox,\n} from '@chakra-ui/react';\nimport {\n  RegistrationTitle,\n  ErrorMessage,\n  RegisterLogInLink,\n  RememberMeText,\n} from './PageStyles/UserAuthForm.styled';\nimport { BsEye, BsEyeSlash } from 'react-icons/bs';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { toastOptionsMain } from 'settings/toastOptions';\n\nconst LogIn = () => {\n  const initialValues = { email: '', password: '', rememberMe: 'true' };\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const [registerLoad, setRegisterLoad] = useState(false);\n\n  const { authErrorCode } = useAuth();\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (authErrorCode === 400) {\n      toast.error(\n        'The email address or password is incorrect. Please retry...',\n        toastOptionsMain\n      );\n      dispatch(authError(null));\n      setRegisterLoad(false);\n    }\n  }, [dispatch, authErrorCode]);\n\n  const handleSubmit = ({ email, password, rememberMe: isRememberMe }) => {\n    setRegisterLoad(true);\n    dispatch(rememberUser(isRememberMe));\n    dispatch(logIn({ email, password }));\n  };\n\n  return (\n    <Box\n      pt={4}\n      w=\"100%\"\n      minH=\"calc(100vh - 70px)\"\n      bg=\"thirdBg\"\n      textAlign=\"center\"\n    >\n      <RegistrationTitle>Log In</RegistrationTitle>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={logInSchema}\n          innerRef={ref}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={3} display=\"flex\" align=\"flex-start\">\n                <InputGroup>\n                  <FormControl isInvalid={!!errors.email && touched.email}>\n                    <FormLabel htmlFor=\"email\">E-mail</FormLabel>\n                    <Field\n                      autoComplete=\"off\"\n                      as={Input}\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"filled\"\n                      borderRadius=\"none\"\n                      w=\"248px\"\n                      pl={2}\n                      validate={value => {\n                        let error;\n\n                        if (value < 1) {\n                          error = errors.email;\n                        }\n\n                        return error;\n                      }}\n                    />\n                    <ErrorMessage>\n                      {<FiAlertTriangle />}\n                      {errors.email}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <InputGroup>\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Field\n                        autoComplete=\"off\"\n                        as={Input}\n                        id=\"password\"\n                        name=\"password\"\n                        variant=\"filled\"\n                        type={showPassword ? 'text' : 'password'}\n                        borderRadius=\"none\"\n                        pl={2}\n                        pr=\"40px\"\n                        w=\"248px\"\n                        validate={value => {\n                          let error;\n                          if (value.length < 7) {\n                            error = errors.password;\n                          }\n                          return error;\n                        }}\n                      />\n                      <InputRightElement w={10}>\n                        {ref.current?.values.password.length > 0 && (\n                          <Button\n                            size=\"sm\"\n                            w={5}\n                            p={0}\n                            borderRadius={50}\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? <BsEyeSlash /> : <BsEye />}\n                          </Button>\n                        )}\n                      </InputRightElement>\n                    </InputGroup>\n                    <ErrorMessage>\n                      {<FiAlertTriangle />}\n                      {errors.password}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <Box as=\"label\" display=\"flex\">\n                  <Field\n                    as={Checkbox}\n                    id=\"rememberMe\"\n                    name=\"rememberMe\"\n                    colorScheme=\"teal\"\n                    defaultChecked={true}\n                  />\n                  <RememberMeText>Remember me?</RememberMeText>\n                </Box>\n\n                <Button\n                  isDisabled={registerLoad}\n                  isLoading={registerLoad}\n                  loadingText=\"Working...\"\n                  borderRadius=\"none\"\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  width=\"248px\"\n                >\n                  Log In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n      <Box as=\"p\" mt={3}>\n        or\n        <RegisterLogInLink to=\"/registration\">Sign Up</RegisterLogInLink>\n      </Box>\n      <ToastContainer />\n    </Box>\n  );\n};\n\nexport default LogIn;\n","import styled from '@emotion/styled';\n\nimport { FormErrorMessage } from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\n\nexport const RegistrationTitle = styled.p`\n  font-size: ${p => p.theme.fontSizes.l};\n  margin-bottom: ${p => p.theme.space[3]};\n`;\n\nexport const ErrorMessage = styled(FormErrorMessage)`\n  position: relative;\n  width: 220px;\n  font-style: italic;\n  font-size: ${p => p.theme.fontSizes.s};\n  text-align: center;\n  border: ${p => p.theme.borders.light};\n  border-color: ${p => p.theme.colors.errorBg};\n  padding: ${p => p.theme.space[1]};\n  background-color: ${p => p.theme.colors.error};\n  border-radius: ${p => p.theme.radii.normal};\n  margin-top: ${p => p.theme.space[3]};\n  margin-left: 25px;\n  color: inherit;\n\n  svg {\n    position: absolute;\n    top: -11px;\n    left: -11px;\n\n    width: 20px;\n    height: 20px;\n    fill: yellow;\n    border: none;\n    color: ${p => p.theme.colors.warningIcon};\n  }\n`;\n\nexport const RegisterLogInLink = styled(Link)`\n  margin-left: ${p => p.theme.space[2]};\n  color: #0f05b6;\n`;\nexport const RememberMeText = styled.span`\n  margin-left: ${p => p.theme.space[2]};\n`;\n","import { Zoom } from 'react-toastify';\nexport const toastOptionsMain = {\n  position: 'top-center',\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'colored',\n  transition: Zoom,\n};\n\nexport const toastOptionsWarn = {\n  position: 'top-center',\n  autoClose: 7000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n\n  theme: 'colored',\n  transition: Zoom,\n};\n"],"names":["registerSchema","yup","name","min","max","required","email","password","logInSchema","mailFormat","dispatch","useDispatch","useState","showPassword","setShowPassword","registerLoad","setRegisterLoad","authErrorCode","useAuth","ref","useRef","useEffect","toast","toastOptionsMain","authError","pt","w","minH","bg","textAlign","display","justifyContent","initialValues","rememberMe","onSubmit","isRememberMe","rememberUser","logIn","validationSchema","innerRef","handleSubmit","errors","touched","spacing","align","isInvalid","htmlFor","autoComplete","as","Input","id","type","variant","borderRadius","pl","validate","value","error","size","pr","length","current","values","p","onClick","Checkbox","colorScheme","defaultChecked","isDisabled","isLoading","loadingText","width","mt","to","RegistrationTitle","styled","theme","fontSizes","l","space","ErrorMessage","FormErrorMessage","s","borders","light","colors","errorBg","radii","normal","warningIcon","RegisterLogInLink","Link","RememberMeText","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","Zoom"],"sourceRoot":""}