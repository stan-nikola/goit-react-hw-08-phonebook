{"version":3,"file":"static/js/418.b68cf855.chunk.js","mappings":"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","sources":["constants/schema.js","pages/LogIn.jsx","pages/PageStyles/UserAuthForm.styled.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup\n    .string()\n    .min(4, 'Name must be at least 4 letters long')\n    .max(16, 'Name must be not longer than 16 letters')\n    .required(\n      \"Please enter name. For example Adrian, Jacob Mercer, Charles de Batz, Castelmore d'Artagnan\"\n    ),\n  email: yup\n    .string()\n    .email('Must be a valid email Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const logInSchema = yup.object({\n  email: yup\n    .string()\n    .email('Must be a valid email Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const mailFormat = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\n","import { useState } from 'react';\nimport { Formik, Field } from 'formik';\nimport { logInSchema, mailFormat } from 'constants/schema';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from './../redux/auth/operations';\nimport { rememberUser } from 'redux/auth/authSlice';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  InputGroup,\n  Input,\n  VStack,\n  InputRightElement,\n  Button,\n  Checkbox,\n} from '@chakra-ui/react';\nimport {\n  RegistrationTitle,\n  ErrorIcon,\n  ErrorMessage,\n  RegisterLogInLink,\n} from './PageStyles/UserAuthForm.styled';\nimport { BsEye, BsEyeSlash } from 'react-icons/bs';\n\nconst LogIn = () => {\n  const initialValues = { email: '', password: '', rememberMe: true };\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n  const [registerLoad, setRegisterLoad] = useState(false);\n  const [passwordValue, setPasswordValue] = useState(0);\n\n  const handleSubmit = (\n    { email, password, rememberMe: isRememberMe },\n    { resetForm }\n  ) => {\n    dispatch(logIn({ email, password }));\n    setRegisterLoad(true);\n    dispatch(rememberUser(isRememberMe));\n    resetForm();\n  };\n\n  return (\n    <Box pt={4} w=\"100vw\" h=\"90vh\" bg=\"thirdBg\" textAlign=\"center\">\n      <RegistrationTitle>Log In</RegistrationTitle>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={logInSchema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={4} display=\"flex\" align=\"flex-start\">\n                <InputGroup>\n                  <FormControl isInvalid={!!errors.email && touched.email}>\n                    <FormLabel htmlFor=\"email\">E-mail</FormLabel>\n                    <Field\n                      autoComplete=\"off\"\n                      as={Input}\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"filled\"\n                      borderRadius=\"none\"\n                      w=\"248px\"\n                      pl={2}\n                      validate={value => {\n                        let error;\n\n                        if (value < 1) {\n                          console.log('111111');\n                          error = errors.email;\n                        }\n\n                        return error;\n                      }}\n                    />\n                    <ErrorMessage>\n                      {<ErrorIcon />}\n                      {errors.email}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <InputGroup>\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Field\n                        autoComplete=\"off\"\n                        as={Input}\n                        id=\"password\"\n                        name=\"password\"\n                        variant=\"filled\"\n                        type={showPassword ? 'text' : 'password'}\n                        borderRadius=\"none\"\n                        pl={2}\n                        pr=\"40px\"\n                        w=\"248px\"\n                        validate={value => {\n                          setPasswordValue(value);\n                          let error;\n\n                          if (value.match(mailFormat)) {\n                            error = errors.email;\n                          }\n\n                          return error;\n                        }}\n                      />\n                      <InputRightElement w={10}>\n                        <Button\n                          w={5}\n                          p={0}\n                          size=\"sm\"\n                          borderRadius={50}\n                          isDisabled={passwordValue < 1}\n                          onClick={() => setShowPassword(!showPassword)}\n                        >\n                          {showPassword ? <BsEyeSlash /> : <BsEye />}\n                        </Button>\n                      </InputRightElement>\n                    </InputGroup>\n\n                    <ErrorMessage>\n                      {<ErrorIcon />}\n                      {errors.password}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <Field\n                  as={Checkbox}\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  colorScheme=\"purple\"\n                  defaultChecked={true}\n                >\n                  Remember me?\n                </Field>\n                <Button\n                  isDisabled={registerLoad}\n                  isLoading={registerLoad}\n                  loadingText=\"Working...\"\n                  borderRadius=\"none\"\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  width=\"248px\"\n                >\n                  Log In\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n      <Box as=\"p\" mt={3}>\n        or\n        <RegisterLogInLink to=\"/registration\">Register</RegisterLogInLink>\n      </Box>\n    </Box>\n  );\n};\n\nexport default LogIn;\n","import styled from '@emotion/styled';\nimport { FiAlertTriangle } from 'react-icons/fi';\nimport { FormErrorMessage } from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\n\nexport const RegistrationTitle = styled.p`\n  font-size: ${p => p.theme.fontSizes.l};\n  margin-bottom: ${p => p.theme.space[3]};\n  m\n`;\n\nexport const ErrorMessage = styled(FormErrorMessage)`\n  position: absolute;\n  top: 30px;\n  left: 265px;\n\n  z-index: 10;\n  width: 300px;\n  font-style: italic;\n  font-size: ${p => p.theme.fontSizes.s};\n  text-align: center;\n  border: ${p => p.theme.borders.light};\n  border-color: ${p => p.theme.colors.errorBg};\n  padding: ${p => p.theme.space[1]};\n  background-color: ${p => p.theme.colors.error};\n  border-radius: ${p => p.theme.radii.normal};\n`;\n\nexport const ErrorIcon = styled(FiAlertTriangle)`\n  position: absolute;\n  top: -11px;\n  left: -11px;\n\n  width: 20px;\n  height: 20px;\n  fill: yellow;\n  border: none;\n  color: ${p => p.theme.colors.secondaryBorder};\n`;\n\nexport const RegisterLogInLink = styled(Link)`\n  margin-left: ${p => p.theme.space[2]};\n  color: #0f05b6;\n`;\n"],"names":["registerSchema","yup","name","min","max","required","email","password","logInSchema","mailFormat","dispatch","useDispatch","useState","showPassword","setShowPassword","registerLoad","setRegisterLoad","passwordValue","setPasswordValue","pt","w","h","bg","textAlign","display","justifyContent","initialValues","rememberMe","onSubmit","isRememberMe","resetForm","logIn","rememberUser","validationSchema","handleSubmit","errors","touched","spacing","align","isInvalid","htmlFor","autoComplete","as","Input","id","type","variant","borderRadius","pl","validate","value","error","console","log","size","pr","match","p","isDisabled","onClick","Checkbox","colorScheme","defaultChecked","isLoading","loadingText","width","mt","to","RegistrationTitle","styled","theme","fontSizes","l","space","ErrorMessage","FormErrorMessage","s","borders","light","colors","errorBg","radii","normal","ErrorIcon","FiAlertTriangle","secondaryBorder","RegisterLogInLink","Link"],"sourceRoot":""}