{"version":3,"file":"static/js/451.8fbf2bee.chunk.js","mappings":"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","sources":["constants/schema.js","pages/PageStyles/UserAuthForm.styled.jsx","pages/Registration.jsx","settings/toastOptions.js"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup\n    .string()\n    .min(4, 'Name must be at least 4 letters long')\n    .max(16, 'Name must be not longer than 16 letters')\n    .required('Please enter name. For example Mango, Polly, Repeta'),\n  email: yup\n    .string()\n    .email('Must be a valid email. Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const logInSchema = yup.object({\n  email: yup\n    .string()\n    .email('Must be a valid email Example: my.mail@mail.com')\n    .required('Please enter e-mail '),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 7 characters')\n    .required('Please enter password'),\n});\n\nexport const mailFormat = '[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$';\n","import styled from '@emotion/styled';\n\nimport { FormErrorMessage } from '@chakra-ui/react';\nimport { Link } from 'react-router-dom';\n\nexport const RegistrationTitle = styled.p`\n  font-size: ${p => p.theme.fontSizes.l};\n  margin-bottom: ${p => p.theme.space[3]};\n`;\n\nexport const ErrorMessage = styled(FormErrorMessage)`\n  position: relative;\n  width: 220px;\n  font-style: italic;\n  font-size: ${p => p.theme.fontSizes.s};\n  text-align: center;\n  border: ${p => p.theme.borders.light};\n  border-color: ${p => p.theme.colors.errorBg};\n  padding: ${p => p.theme.space[1]};\n  background-color: ${p => p.theme.colors.error};\n  border-radius: ${p => p.theme.radii.normal};\n  margin-top: ${p => p.theme.space[3]};\n  margin-left: 25px;\n  color: inherit;\n\n  svg {\n    position: absolute;\n    top: -11px;\n    left: -11px;\n\n    width: 20px;\n    height: 20px;\n    fill: yellow;\n    border: none;\n    color: ${p => p.theme.colors.warningIcon};\n  }\n`;\n\nexport const RegisterLogInLink = styled(Link)`\n  margin-left: ${p => p.theme.space[2]};\n  color: #0f05b6;\n`;\nexport const RememberMeText = styled.span`\n  margin-left: ${p => p.theme.space[2]};\n`;\n","import { Formik, Field } from 'formik';\nimport { mailFormat, registerSchema } from 'constants/schema';\nimport { BsEye, BsEyeSlash } from 'react-icons/bs';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../redux/auth/operations';\nimport { useState, useEffect, useRef } from 'react';\nimport { useAuth } from 'components/hooks';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  VStack,\n  InputRightElement,\n  InputGroup,\n  Checkbox,\n} from '@chakra-ui/react';\nimport {\n  ErrorMessage,\n  RegistrationTitle,\n  RememberMeText,\n} from './PageStyles/UserAuthForm.styled';\nimport { rememberUser, authError } from 'redux/auth/authSlice';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { toastOptionsMain } from 'settings/toastOptions';\nimport { FiAlertTriangle } from 'react-icons/fi';\n\nconst Registration = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const { authErrorCode, isAuthLoading } = useAuth();\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n    rememberMe: 'true',\n  };\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (authErrorCode === 400) {\n      toast.error(\n        `User with ${ref.current?.values.email} already exist, please choose another email address`,\n        toastOptionsMain\n      );\n      dispatch(authError(null));\n    }\n  }, [dispatch, authErrorCode]);\n\n  const handleSubmit = ({\n    name,\n    email,\n    password,\n    rememberMe: isRememberMe,\n  }) => {\n    dispatch(register({ name, email, password }));\n    dispatch(rememberUser(isRememberMe));\n  };\n\n  return (\n    <Box\n      pt={4}\n      w=\"100%\"\n      minH=\"calc(100vh - 70px)\"\n      bg=\"thirdBg\"\n      textAlign=\"center\"\n    >\n      <RegistrationTitle>Sign Up</RegistrationTitle>\n      <Box display=\"flex\" justifyContent=\"center\">\n        <Formik\n          innerRef={ref}\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={registerSchema}\n        >\n          {({ handleSubmit, errors, touched }) => (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={3} display=\"flex\" align=\"flex-start\">\n                <InputGroup>\n                  <FormControl isInvalid={!!errors.name && touched.name}>\n                    <FormLabel htmlFor=\"name\">Name</FormLabel>\n                    <Field\n                      autoComplete=\"off\"\n                      as={Input}\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"name\"\n                      variant=\"filled\"\n                      borderRadius=\"none\"\n                      w=\"248px\"\n                      pl={2}\n                      validate={value => {\n                        let error;\n\n                        if (value.length >= 20 || value.length <= 3) {\n                          error = errors.name;\n                        }\n                        return error;\n                      }}\n                    />\n                    <ErrorMessage>\n                      {<FiAlertTriangle />}\n                      {errors.name}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <InputGroup>\n                  <FormControl isInvalid={!!errors.email && touched.email}>\n                    <FormLabel htmlFor=\"email\">E-mail</FormLabel>\n                    <Field\n                      autoComplete=\"off\"\n                      as={Input}\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      variant=\"filled\"\n                      borderRadius=\"none\"\n                      w=\"248px\"\n                      pl={2}\n                      validate={value => {\n                        let error;\n                        if (value.match(mailFormat)) {\n                          error = errors.email;\n                        }\n\n                        return error;\n                      }}\n                    />\n                    <ErrorMessage>\n                      {<FiAlertTriangle />}\n                      {errors.email}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n                <InputGroup>\n                  <FormControl\n                    isInvalid={!!errors.password && touched.password}\n                  >\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\n                    <InputGroup size=\"md\">\n                      <Field\n                        autoComplete=\"off\"\n                        as={Input}\n                        id=\"password\"\n                        name=\"password\"\n                        variant=\"filled\"\n                        type={showPassword ? 'text' : 'password'}\n                        borderRadius=\"none\"\n                        pl={2}\n                        pr=\"40px\"\n                        w=\"248px\"\n                        validate={value => {\n                          let error;\n                          if (value.length < 7) {\n                            error = errors.password;\n                          }\n                          return error;\n                        }}\n                      />\n                      <InputRightElement w={10}>\n                        {ref.current?.values.password.length > 0 && (\n                          <Button\n                            size=\"sm\"\n                            w={5}\n                            p={0}\n                            borderRadius={50}\n                            onClick={() => setShowPassword(!showPassword)}\n                          >\n                            {showPassword ? <BsEyeSlash /> : <BsEye />}\n                          </Button>\n                        )}\n                      </InputRightElement>\n                    </InputGroup>\n                    <ErrorMessage>\n                      {<FiAlertTriangle />}\n                      {errors.password}\n                    </ErrorMessage>\n                  </FormControl>\n                </InputGroup>\n\n                <Box as=\"label\" display=\"flex\">\n                  <Field\n                    as={Checkbox}\n                    id=\"rememberMe\"\n                    name=\"rememberMe\"\n                    colorScheme=\"teal\"\n                    defaultChecked={true}\n                  />\n                  <RememberMeText>Remember me?</RememberMeText>\n                </Box>\n\n                <Button\n                  isDisabled={isAuthLoading}\n                  isLoading={isAuthLoading}\n                  loadingText=\"Working...\"\n                  borderRadius=\"none\"\n                  type=\"submit\"\n                  colorScheme=\"teal\"\n                  width=\"248px\"\n                >\n                  Sign Up\n                </Button>\n              </VStack>\n            </form>\n          )}\n        </Formik>\n      </Box>\n      <ToastContainer />\n    </Box>\n  );\n};\n\nexport default Registration;\n","import { Zoom } from 'react-toastify';\nexport const toastOptionsMain = {\n  position: 'top-center',\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'colored',\n  transition: Zoom,\n};\n\nexport const toastOptionsWarn = {\n  position: 'top-center',\n  autoClose: 7000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n\n  theme: 'colored',\n  transition: Zoom,\n};\n"],"names":["registerSchema","yup","name","min","max","required","email","password","logInSchema","mailFormat","RegistrationTitle","styled","p","theme","fontSizes","l","space","ErrorMessage","FormErrorMessage","s","borders","light","colors","errorBg","error","radii","normal","warningIcon","RegisterLogInLink","Link","RememberMeText","useState","showPassword","setShowPassword","useAuth","authErrorCode","isAuthLoading","dispatch","useDispatch","ref","useRef","useEffect","toast","current","values","toastOptionsMain","authError","pt","w","minH","bg","textAlign","display","justifyContent","innerRef","initialValues","rememberMe","onSubmit","isRememberMe","register","rememberUser","validationSchema","handleSubmit","errors","touched","spacing","align","isInvalid","htmlFor","autoComplete","as","Input","id","type","variant","borderRadius","pl","validate","value","length","match","size","pr","onClick","Checkbox","colorScheme","defaultChecked","isDisabled","isLoading","loadingText","width","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","Zoom"],"sourceRoot":""}